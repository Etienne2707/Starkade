/* Autogenerated file. Do not edit manually. */

import { Account, AccountInterface } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import { GameState } from "../../utils";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export interface MoveProps {
    account: Account | AccountInterface;
    game_state : GameState;
}

export async function setupWorld(provider: DojoProvider) {
    function privateRoom() {
        const create_player = async ({ account }: { account: AccountInterface }) => {
          try {
            return await provider.execute(account, {
              contractName: "privateRoom",
              entrypoint: "create_player",
              calldata: [],
            });
          } catch (error) {
            console.error("Error executing create_player:", error);
            throw error;
          }
        };
    
        const create_game = async ({ account }: { account: AccountInterface }) => {
          try {
            return await provider.execute(account, {
              contractName: "privateRoom",
              entrypoint: "create_game",
              calldata: [],
            });
          } catch (error) {
            console.error("Error executing create_game", error);
            throw error;
          }
        };
    
    
        const join = async ({
          account,
          game_id,
        }: {
          account: AccountInterface;
          game_id : number;
        }) => {
          try {
            return await provider.execute(account, {
              contractName: "privateRoom",
              entrypoint: "join",
              calldata: [game_id],
            });
          } catch (error) {
            console.error("Error executing join:", error);
            throw error;
          }
        };
    
        const leave = async ({
          account,
          game_id,
        }: {
          account: AccountInterface;
          game_id : number;
        }) => {
          try {
            return await provider.execute(account, {
              contractName: "privateRoom",
              entrypoint: "leave",
              calldata: [game_id],
            });
          } catch (error) {
            console.error("Error executing leave:", error);
            throw error;
          }
        };
        return { create_player, create_game, join, leave };

    }

    function publicRoom() {

      const unregister = async ({ account }: { account: AccountInterface }) => {
        try {
          return await provider.execute(account, {
            contractName: "publicRoom",
            entrypoint: "unregister",
            calldata: [],
          });
        } catch (error) {
          console.error("Error executing register:", error);
          throw error;
        }
      };
  
      const register = async ({
        account,
        name,
      }: {
        account: AccountInterface;
        name : bigint;
      }) => {
        try {
          return await provider.execute(account, {
            contractName: "publicRoom",
            entrypoint: "register",
            calldata: [name],
          });
        } catch (error) {
          console.error("Error executing register:", error);
          throw error;
        }
      };
      return { register,unregister };

  }
      return {
            privateRoom: privateRoom(),
            publicRoom : publicRoom(),
      };
}
